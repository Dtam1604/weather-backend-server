// File: server.js (M√£ ngu·ªìn Web API trung gian ƒë·∫ßy ƒë·ªß)
const express = require('express');
const axios = require('axios');
require('dotenv').config(); // T·∫£i bi·∫øn t·ª´ file .env

// C·∫•u h√¨nh API v√† Server
const app = express();
const PORT = process.env.PORT || 3000;
const WEATHER_API_KEY = process.env.WEATHER_API_KEY;
const BASE_URL = 'http://api.weatherapi.com/v1';

// C·∫•u h√¨nh CORS
app.use((req, res, next) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    next();
});

// H√†m ti·ªán √≠ch chung ƒë·ªÉ g·ªçi WeatherAPI.com
async function callWeatherApi(endpoint, queryParams) {
    if (!WEATHER_API_KEY) {
        throw { status: 500, message: "L·ªói c·∫•u h√¨nh: Kh√≥a API kh√¥ng t√¨m th·∫•y tr√™n m√°y ch·ªß." };
    }

    const params = new URLSearchParams({
        ...queryParams,
        key: WEATHER_API_KEY,
        lang: 'vi' // ƒê·∫∑t ng√¥n ng·ªØ ti·∫øng Vi·ªát theo y√™u c·∫ßu ·ª©ng d·ª•ng
    }).toString();

    const fullUrl = `${BASE_URL}${endpoint}?${params}`;
    
    try {
        const response = await axios.get(fullUrl);
        return response.data;
    } catch (error) {
        const status = error.response?.status || 500;
        const message = error.response?.data?.error?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi WeatherAPI.";
        throw { status, message };
    }
}

// ----------------------------------------------------
//                    ENDPOINTS C·ªêT L√ïI
// ----------------------------------------------------

/**
 * Endpoint 1: Th·ªùi ti·∫øt Hi·ªán t·∫°i (UC1)
 * Y√™u c·∫ßu: GET /api/current?q=<LOCATION>
 */
app.get('/api/current', async (req, res) => {
    const q = req.query.q; 
    if (!q) return res.status(400).json({ error: "Tham s·ªë 'q' (v·ªã tr√≠) l√† b·∫Øt bu·ªôc." });

    try {
        const data = await callWeatherApi('/current.json', { q, aqi: 'yes' }); 
        
        // L·ªçc d·ªØ li·ªáu c·∫ßn thi·∫øt cho m√†n h√¨nh ch√≠nh (MainActivity)
        const filteredData = {
            location: {
                name: data.location.name,
                country: data.location.country,
                lat: data.location.lat,
                lon: data.location.lon,
            },
            current: {
                temp_c: data.current.temp_c,
                condition: data.current.condition.text, 
                icon_url: data.current.condition.icon, // Icon minh h·ªça
                humidity: data.current.humidity,
                wind_kph: data.current.wind_kph,
            }
        };

        res.json(filteredData);
    } catch (err) {
        res.status(err.status || 500).json({ error: "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt.", details: err.message });
    }
});

/**
 * Endpoint 2: D·ª± b√°o (UC2)
 * Y√™u c·∫ßu: GET /api/forecast?q=<LOCATION>&days=<NUMBER>
 */
app.get('/api/forecast', async (req, res) => {
    const q = req.query.q;
    const days = req.query.days || 5; 
    
    if (!q) return res.status(400).json({ error: "Tham s·ªë 'q' (v·ªã tr√≠) l√† b·∫Øt bu·ªôc." });
    if (days < 1 || days > 14) return res.status(400).json({ error: "Tham s·ªë 'days' ph·∫£i t·ª´ 1 ƒë·∫øn 14." });

    try {
        // Tr·∫£ v·ªÅ to√†n b·ªô d·ªØ li·ªáu d·ª± b√°o ƒë·ªÉ Android (ForecastActivity) x·ª≠ l√Ω
        const data = await callWeatherApi('/forecast.json', { 
            q, 
            days, 
            aqi: 'yes', 
            alerts: 'yes' // H·ªó tr·ª£ UC7: Nh·∫≠n th√¥ng b√°o th·ªùi ti·∫øt x·∫•u
        }); 
        
        res.json(data); 
    } catch (err) {
        res.status(err.status || 500).json({ error: "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu d·ª± b√°o.", details: err.message });
    }
});

/**
 * Endpoint 3: T√¨m ki·∫øm Th√†nh ph·ªë (UC3)
 * Y√™u c·∫ßu: GET /api/search?q=<SEARCH_QUERY>
 */
app.get('/api/search', async (req, res) => {
    const q = req.query.q;
    
    if (!q || q.length < 2) {
        return res.status(400).json({ error: "Tham s·ªë 'q' ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª± ƒë·ªÉ t√¨m ki·∫øm th√†nh ph·ªë." });
    }

    try {
        const data = await callWeatherApi('/search.json', { q }); 
        
        // L·ªçc k·∫øt qu·∫£ t√¨m ki·∫øm (c·∫ßn thi·∫øt cho B·∫£ng City trong RoomDatabase)
        const searchResults = data.map(item => ({
            id: item.id,
            name: item.name,
            region: item.region,
            country: item.country,
            lat: item.lat,
            lon: item.lon,
        }));
        
        res.json(searchResults); 
    } catch (err) {
        res.status(err.status || 500).json({ error: "Kh√¥ng th·ªÉ t√¨m ki·∫øm th√†nh ph·ªë.", details: err.message });
    }
});

// Endpoint ki·ªÉm tra ho·∫°t ƒë·ªông c·ªßa server
app.get('/', (req, res) => {
    res.send('Weather Proxy API is running!');
});
module.exports = app;
// Kh·ªüi ƒë·ªông Server
// app.listen(PORT, () => {
//     console.log(`\n***************************************************`);
//     console.log(`üöÄ Web API Trung Gian ƒê√É S·∫¥N S√ÄNG tr√™n c·ªïng ${PORT}`);
//     console.log(`Ki·ªÉm tra Current: http://localhost:${PORT}/api/current?q=Hanoi`);
//     console.log(`***************************************************\n`);
// });